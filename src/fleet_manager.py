import json
from model import *
from parsing import *
from task_bot import TaskBot
from files import *

class FleetManager:

  user_directory = ""
  conversation_history = ""

  def __init__(self, directory: str):
    self.user_directory = directory

  def generateMissionPrompt(self, user_prompt: str):
    prompt = f"""
You are the FleetManager AI responsible for overseeing complex tasks.
Your role is to assign tasks to TaskBot AI with minimal context.
You will break down a complete plan for mission assigned by the user with all initial subtasks required
Rules:
- IT MUST BE VERY SIMPLE
- IT MUST NOT DEVIATE FROM THE USER PROMPT
- IT MUST BE A LIST OF COMMA SEPERATED TASKS WITHOUT MUCH DETAILS, IT WILL BE DONE IN ITERATIONS
- ONLY RESPOND WITH THE MISSION

- User base directory: {self.user_directory}
- User Mission: {user_prompt}
    """
    return prompt

  def generateIterationPrompt(self, user_prompt: str, mission: str, progress: int):
    prompt = f"""
- User prompt: {user_prompt}
- User base directory: {self.user_directory}
[CONVERSATION HISTORY (IF EMPTY, YOU ARE SUPPOSED TO START WITH THE FIRST ITERATION)]
FlatManager: {json.dumps({
  "status": "running",
  "progress": 0,
  "commands": [],
  "query": "Initialization of the mission to PROGRESS 0%"
})}
TaskBot: Ready for executing the first task
{self.conversation_history}
[END OF CONVERSATION HISTORY]

Previous progress: {progress}%

You are the FleetManager AI responsible to calculate only the next step

What is the best next task that is required to go further in the mission of just 1 single step, a little single step that you are to focus on.
You have these commands at disposal: 'read', 'create', 'delete', 'modify', 'copy', 'move', 'rename'.
The more commands you will send to the TaskBot, the worse the user will be happy.
The user will be extremely happy if you just focus on the very next step only for now.
You MUST update the "progress" in your response to reflect the new progress of the mission.
This is the most crucial part:
- you must assess with a reflection on how much you add to the previous progress given your new task (but don't include the reflection in the response)
- How far are we from reaching the end goal after this one task???
- Is it finished???
Always re-assess these

Notes:
- Commands handle one file at a time. Use multiple commands for multiple files.
- Include the full file path in the "filePath" key and should make sure to not get outside of the scope of the user base directory.
- The "query" key is a string should describe the specific content to be generated by the AI TaskBot. Be very descriptive but concise.
- The mission ends when the "progress" reaches or exceeds 100%.

MOST IMPORTANT TO NOT BREAK THE SYSTEM: Ensure your response is fully valid JSON without any code blocks, don't tell what is the JSON that will be written but just write it directly.
Format:
{json.dumps({
  "progress": progress,
  "commands": [
    { "action": "create", "filePath": "path/to/file", "query": "The query for the content of the file given to a smart AI" }
  ],
})}
    """
    return prompt
  
  def execute(self, user_prompt: str):
    # Get a Fleet Mission
    #initial_prompt = self.generateMissionPrompt(user_prompt)
    # mission = get_response(initial_prompt)
    mission = ""
    # Iterate until Mission is complete
    progress = 0
    while progress < 100:
      prompt = self.generateIterationPrompt(user_prompt, mission, progress)
      response = parse_json(get_response(prompt))
      if response.get('error', False):
        continue
      progress = response.get('progress', 0)
      if progress < 100:
        cmds = response.get('commands', [])
        self.add_to_history('FleetManager', json.dumps(response))
        bot = TaskBot(self.user_directory)
        botRes = bot.execute(cmds)
        self.add_to_history('TaskBot', botRes)
    print("finished")

  def add_to_history(self, role: str, value: str):
    if role == "FleetManager":
      print()
    print("> [" + role + "]", value)
    self.conversation_history += role + ": " + value + "\n"